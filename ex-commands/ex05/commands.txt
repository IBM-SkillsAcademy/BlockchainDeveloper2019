Part 1
             Step 2
                docker rm -f $(docker ps -aq); docker volume rm -f $(docker volume ls -q)

cd ~/BlockchainDeveloper2019/ex-commands/ex05/
./startEx05.sh
Part 2 
step 4
~/BlockchainDeveloper2019/ex-commands/ex05/enrollUser.sh Manufacturer1 org1 department1 Manufacturer

~/BlockchainDeveloper2019/Vehicle-Network/crypto-config/peerOrganizations/org1.example.com/users

~/BlockchainDeveloper2019/ex-commands/ex05/enrollUser.sh Regulator1 org2 department1 Regulator
 
~/BlockchainDeveloper2019/Vehicle-Network/crypto-config/peerOrganizations/org2.example.com/users 

for (let i = 0; i < roleName.length; i++) {
   // if (clientId.getAttributeValue('role')) {
   if (clientId.assertAttributeValue('role', roleName[i])) {
       return true;
       }
}

         await this.hasRole(ctx, ['Manufacturer']);
==============================================================================
cd ~/BlockchainDeveloper2019/Vehicle-Network
./upgrade.sh 1.9.4
Part 4 
Step 1
docker exec -it cli bash

                      Step 2

export CORE_PEER_LOCALMSPID=Org1MSP
export CORE_PEER_ADDRESS=peer0.org1.example.com:7051
export CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/users/Manufacturer1@org1.example.com/msp
export CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt

                       Step 3

peer chaincode invoke -o orderer.example.com:7050 --tls \
--cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem \
--peerAddresses peer0.org1.example.com:7051 \
--tlsRootCertFiles /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt \
--peerAddresses peer0.org2.example.com:9051 \
--tlsRootCertFiles /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt \
--peerAddresses peer0.org3.example.com:11051 \
--tlsRootCertFiles /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org3.example.com/peers/peer0.org3.example.com/tls/ca.crt \
-C mychannel -n vehicle-manufacture -c '{"Args":["placeOrder", "order1", "George", "Honda", "Fit", "blue"]}'

 Step 4

export CORE_PEER_LOCALMSPID=Org2MSP
export CORE_PEER_ADDRESS=peer0.org2.example.com:9051
export CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/users/Regulator1@org2.example.com/msp
export CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt

Step 5 
peer chaincode invoke -o orderer.example.com:7050 --tls \
--cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem \
--peerAddresses peer0.org1.example.com:7051 \
--tlsRootCertFiles /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt \
--peerAddresses peer0.org2.example.com:9051 \
--tlsRootCertFiles /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt \
--peerAddresses peer0.org3.example.com:11051 \
--tlsRootCertFiles /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org3.example.com/peers/peer0.org3.example.com/tls/ca.crt \
-C mychannel -n vehicle-manufacture -c '{"Args":["placeOrder", "order2", "Michael", "Honda", "Civic", "red"]}'


================================================Invoke the getOrders transaction with the newly created identities=======================================================
peer chaincode query -o orderer.example.com:7050 --tls --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem -C mychannel -n vehicle-manufacture -c '{"Args":["getOrders"]}'

Step 2
export CORE_PEER_LOCALMSPID=Org1MSP
export CORE_PEER_ADDRESS=peer0.org1.example.com:7051
export CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/users/Manufacturer1@org1.example.com/msp
export CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt


peer chaincode query -o orderer.example.com:7050 --tls --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem -C mychannel -n vehicle-manufacture -c '{"Args":["getOrders"]}'

Part 5
cd ~/BlockchainDeveloper2019/ex-commands/ex05
./stopEx05.sh






